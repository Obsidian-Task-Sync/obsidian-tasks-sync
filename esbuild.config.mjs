import builtins from 'builtin-modules';
import esbuild from 'esbuild';
import process from 'process';

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = process.argv[2] === 'production';

// 이미지 파일을 처리하는 플러그인
const imagePlugin = {
  name: 'image-loader',
  setup(build) {
    build.onLoad({ filter: /\.(png|jpg|jpeg|gif|svg|webp)$/ }, async (args) => {
      const fs = await import('fs');
      const path = await import('path');

      const filePath = args.path;
      const fileName = path.basename(filePath);

      return {
        contents: `export default "data:image/${path.extname(fileName).slice(1)};base64,${fs.readFileSync(filePath, 'base64')}";`,
        loader: 'js',
      };
    });
  },
};

const context = await esbuild.context({
  banner: {
    js: banner,
  },
  entryPoints: ['src/main.ts'],
  bundle: true,
  platform: 'node',
  plugins: [imagePlugin], // 이미지 플러그인 추가
  external: [
    'obsidian',
    'electron',
    '@codemirror/autocomplete',
    '@codemirror/collab',
    '@codemirror/commands',
    '@codemirror/language',
    '@codemirror/lint',
    '@codemirror/search',
    '@codemirror/state',
    '@codemirror/view',
    '@lezer/common',
    '@lezer/highlight',
    '@lezer/lr',

    // for google api autrhoizes node.js
    'http',
    'url',
    ...builtins,
  ],
  format: 'cjs',
  target: 'es2018',
  logLevel: 'info',
  sourcemap: prod ? false : 'inline',
  treeShaking: true,
  outfile: 'main.js',
  minify: prod,
});

if (prod) {
  await context.rebuild();
  process.exit(0);
} else {
  await context.watch();
}
